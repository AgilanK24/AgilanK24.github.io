{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1.%20index/","title":"1. index","text":"<p>Welcome, I am Agilan Kumar</p> <p>Team 305 EGR314</p> <p>Line-Following Robot</p> <p>Overview:</p> <p>We are going to accomplish in making a line-following robot that will follow certain colors and move in certain directions according to this colors also. This will teach stem students how a sensor operates, while also showing them how the communication works with other subsystems in the robot. We will split the subsystems accordingly, with Andrew taking the MQTT subsystem, Zach is the motor/motor driver subsystem, I was the HMI(Human Machine Interface) subsystem, and David is the color sensor subsytem. And with all of these working boards together we should be able to accomplish our goals.</p>"},{"location":"11.%20Power%20Budget/","title":"11. Power Budget","text":""},{"location":"11.%20Power%20Budget/#hmi-subsystem-power-budget","title":"HMI Subsystem Power Budget","text":"Component Voltage (V) Current Draw (mA) Power (mW) Notes ESP32-S3-WROOM-1-N4 3.3 160 (avg) 528 Wi-Fi active, some peripherals enabled OLED SPI Display 3.3 10\u201315 ~50 NHD-C12832A1Z-FSW-FBW-3V3 (ST7565R) Debug LED 3.3 5 16.5 With 330\u03a9 current-limiting resistor Pushbutton (idle) 3.3 ~0 0 No current when idle Voltage Regulator Loss 3.3 \u2014 ~100 Estimated regulator dropout + switching loss Estimated Total \u2014 180\u2013190 mA ~700 mW Based on typical operating conditions <p>\u26a0\ufe0f This budget assumes 3.3V regulated supply. Power draw may spike if Wi-Fi and peripherals are active simultaneously.</p>"},{"location":"2.%20blockdiagram/","title":"2. blockdiagram","text":"*block diagram*"},{"location":"3.%20Individual%20Schematic/","title":"HMI Schematic","text":"<p>Here is the schematic for the HMI project using the ESP32-S3-WROOM.</p> <p></p> <p>Download the PDF of the schematic</p> <p>Download the project ZIP file</p>"},{"location":"4.%20PCB/","title":"4. PCB","text":"<p>Here we have my final board and the team final boards all connected together using the 8-pin ribbon connectors.</p> <p></p> <p></p> <p></p>"},{"location":"5.%20Individual%20BOM/","title":"Agilan Kumar Team 305 Individual BOM","text":"<p>Bill of Materials</p> <p>Here is the list of parts I will be using in my sub-system</p> <p></p>"},{"location":"7.%20Individual-Component-selection/","title":"Agilan Kumar Team 305 Individual Component Selection","text":"<p>Display(OLED/LCD)</p> Parts Choosen Pros Cons Option 1. NHD-C12832A1Z-FSW-FBW-3V3$12.78/eachlink to product * inexpensive for just one* Compatible with other subsystems* Will be on exterior of device * Might be too big for device* Might require external power. * Option 2. * NHD-C12864GG-RN-GBW * $13.32/each * Link to product * small enough to fit on robot * Stable over operating temperature \\ * More expensive * shipping speed varies <p>Choice: Option 1: SSD1306 0.96\" OLED</p> <p>Rationale: Option 1 is the best choice since it is big enough to fit on the device. It will operate and show exactly what needs to be shown, it is also very clear as a display. What is shown on the display is very simple. </p> <p>Power Source</p> Parts Choosen Pros Cons Option 1. 364-1254-ND$6.46/eachlink to product * inexpensive for just one* Compatible with other subsystems* Up to 12V/8.4W * expensive if need more in quantity * shipping speed varies. * Option 2. * SWI3-5-N-MUB * $4.69/each * Link to product * cheaper * Stable over operating temperature \\ * output of 5V only * shipping speed varies <p>Choice: Option 1: 364-1254-ND</p> <p>Rationale: Option 1 is the best choice since it outputs 12V and will not make the subsystem falter in performance. </p> <p>Fuses</p> Parts Choosen Pros Cons Option 1. C1F 8$0.34/eachlink to product * inexpensive for a bunch* up to 8A* Can handle the power going through the subsystem * might not be enough for power * might burn up during use. * Option 2. * 0217002.MXP * $0.44/each * Link to product * goes up to 2A * Stable over operating temperature \\ * might be too small for subsystem * shipping speed varies <p>Choice: option 2: C1F(fuse)</p> <p>Rationale: Option 2 is the best choice cause it is a simple check in the subsystem and does not provide an importance in the subsystem, so 8A is more than enough, and it is small so it wont take up too much space.</p> <p>Voltage Regulator</p> Parts Choose Pros Cons Option 1. LM2575D2T-3.3R4G$3.32/eachlink to product * inexpensive for just one so multiple can be bought incase* Compatible with other subsystems* Input voltage is 4.75V and output can go up to 40V and current output is 1A * Could burn out but very low chance. <p>Choice: Option 1: LM2575D2T-3.3R4G</p> <p>Rationale: Option 1 is the only one I could find that will work for this subsystem. And is compatible with all other parts also and other subsystems. </p> <p>Microcontroller</p> Parts Choose Pros Cons Option 1. ESP32-S3-WROOM-1-N4$5.06/eachlink to product * inexpensive for just one so multiple can be bought incase* Compatible with other subsystems* easier to code * Could burn out but very low chance, also communication with PIC maybe difficult.. <p>Choice: Option 1: ESP32-S3-WROOM-1-N$</p> <p>Rationale: Option 1 is the only one I could find that will work for this subsystem. And is compatible with all other parts also and other subsystems. And like previously it is easier to code on the ESP than the PIC.</p>"},{"location":"8.%20API/","title":"HMI Subsystem API","text":""},{"location":"8.%20API/#overview","title":"Overview","text":"<p>This page documents the communication protocol between the HMI Subsystem and other system components, including the Motor Driver, MQTT, and Sensor subsystems. It specifies the message types, data format, and handling procedures.  </p>"},{"location":"8.%20API/#message-protocol","title":"Message Protocol","text":"<p>Each message follows the class messaging protocol, structured within the \"message data\" area. This section outlines the messages sent and received by the HMI.</p>"},{"location":"8.%20API/#1-messages-sent-by-the-hmi","title":"1. Messages Sent by the HMI","text":""},{"location":"8.%20API/#message-type-10-hmi-command-to-motor-driver","title":"Message Type 10 - HMI Command to Motor Driver","text":"<p>Used to send speed control commands to the motor driver.  </p> Byte Variable Name Type Min Value Max Value Example 1 message_type uint8_t 10 10 10 2 motor_id uint8_t 1 4 1 3-4 motor_speed int16_t -1000 1000 250"},{"location":"8.%20API/#message-type-20-hmi-request-to-sensor-subsystem","title":"Message Type 20 - HMI Request to Sensor Subsystem","text":"<p>Requests sensor data from the sensor subsystem.  </p> Byte Variable Name Type Min Value Max Value Example 1 message_type uint8_t 20 20 20 2 sensor_id uint8_t 1 8 3"},{"location":"8.%20API/#2-messages-received-by-the-hmi","title":"2. Messages Received by the HMI","text":""},{"location":"8.%20API/#message-type-30-sensor-data-update","title":"Message Type 30 - Sensor Data Update","text":"<p>Received from the sensor subsystem, containing updated sensor readings.  </p> Byte Variable Name Type Min Value Max Value Example 1 message_type uint8_t 30 30 30 2 sensor_id uint8_t 1 8 3 3-6 sensor_value float (C: float) -100.0 100.0 25.75"},{"location":"8.%20API/#message-type-40-acknowledgment-from-mqtt","title":"Message Type 40 - Acknowledgment from MQTT","text":"<p>Received when the MQTT subsystem successfully processes an HMI command.  </p> Byte Variable Name Type Min Value Max Value Example 1 message_type uint8_t 40 40 40 2 command_id uint8_t 10 30 10 3 status uint8_t 0 (Fail) 1 (Success) 1"},{"location":"9.%20Message%20structure/","title":"HMI Subsystem - ESP32 UART Communication","text":""},{"location":"9.%20Message%20structure/#overview","title":"Overview","text":"<p>The HMI subsystem receives and processes UART messages from upstream devices and forwards relevant data to the OLED display and WiFi server. </p>"},{"location":"9.%20Message%20structure/#message-format","title":"Message Format","text":"Byte Name Type Description Example Value 1 Start uint8_t Start Byte (0x41) 0x41 2 Sender uint8_t Sender ID 0x05 3 Receiver uint8_t Receiver ID (HMI) 0x04 4 Data uint8_t Sensor/Motor Data Byte 0x7A 5 End uint8_t End Byte (0x42) 0x42"},{"location":"9.%20Message%20structure/#uart-communication-flow","title":"UART Communication Flow","text":"<ol> <li>HMI Receives Messages: Reads incoming sensor and motor values.  </li> <li>Processes Data: Interprets values for display and logging.  </li> <li>Transmits Data: Sends data over WiFi and updates OLED.</li> </ol>"},{"location":"9.%20Message%20structure/#example-messages","title":"Example Messages","text":""},{"location":"9.%20Message%20structure/#receiving-sensor-data","title":"Receiving Sensor Data","text":"Byte Name Example 1 Start Byte 0x41 2 Sender 0x03 3 Receiver 0x05 4 Sensor Value 0x52 5 End Byte 0x42"},{"location":"9.%20Message%20structure/#transmitting-to-oled","title":"Transmitting to OLED","text":"Byte Name Example 1 Start Byte 0x41 2 Sender 0x05 3 Receiver 0x04 4 Sensor Value 0x52 5 End Byte 0x42"},{"location":"9.%20Message%20structure/#conclusion","title":"Conclusion","text":"<p>The HMI subsystem follows structured message formats, ensuring clear data transmission.</p>"},{"location":"Future%20changes/","title":"Future changes","text":""},{"location":"Future%20changes/#hmi-functionality-and-design-discussion","title":"HMI Functionality and Design Discussion","text":"<p>Our schematic implements an HMI using a 128x32 SPI OLED connected to an ESP32-S3-WROOM-1-N4. The display shows directions received via UART (\"left\", \"right\", \"forward\", \"back\"), providing real-time user feedback. A button and LED are included for testing and interaction. This setup meets product requirements by making system status visible and supporting debugging during development.</p>"},{"location":"Future%20changes/#team-design-approach","title":"Team Design Approach","text":"<p>We focused on a modular, easy-to-understand layout to support STEM education. Using the ESP32-S3 gave us access to SPI, UART, I2C, PWM, and Wi-Fi (for MQTT) in a single chip. Our goal was to teach students how HMI, color sensors, motor drivers, and communication protocols interact in real-world systems. The design is simple but effective for hands-on learning. We selected the ST7565R-based graphic LCD because it provided enough flexibility for both text and basic graphics without overwhelming the microcontroller or students with a complex GUI framework. However, we also considered the learning curve, which led to prioritizing simplicity in the schematic routing and using labeled headers for sensors and motors to encourage hands-on debugging.</p>"},{"location":"Future%20changes/#version-20-improvements","title":"Version 2.0 Improvements","text":"<p>If we build a new version: - Add a distance sensor to improve line-stopping accuracy and teach feedback-based control. - Use a simpler I2C LCD to reduce code complexity while keeping HMI functionality. - Upgrade to larger motors for more torque, allowing heavier loads and better performance.</p> <p>These changes would make the system more powerful and easier to program, improving both learning and functionality.</p>"},{"location":"Resources/","title":"Resources","text":""},{"location":"Resources/#mainpy","title":"main.py","text":"<p>from machine import UART, Pin import time import my_oled</p> <p>uart = UART(1, baudrate=9600, tx=43, rx=44)</p> <p>led = Pin(23, Pin.OUT)</p> <p>START_BYTE = 0x41 SENDER_ID = 0x03  # HMI ID END_BYTE = 0x42</p> <p>my_oled.print_text(\"Waiting...\", 0, 0)</p> <p>def flash_led(duration=0.1):     led.on()     time.sleep(duration)     led.off()</p> <p>def forward_message(msg):     time.sleep(1)  # ~1s delay to give MQTT board time to recover     uart.write(msg)     print(\"Forwarded:\", [hex(b) for b in msg])     flash_led()</p> <p>def read_message():     \"\"\"     Read a 5-byte UART message if available and valid.     \"\"\"     if uart.any() &gt;= 5:         msg = uart.read(5)         if msg and msg[0] == START_BYTE and msg[-1] == END_BYTE:             print(\"Received:\", [hex(b) for b in msg])             flash_led()             return msg         else:             print(\"Invalid message.\")     return None</p> <p>while True:     # Listen and forward messages     incoming = read_message()     if incoming:         sender = incoming[1]         data = incoming[3]         my_oled.print_text(f\"From {hex(sender)}: {hex(data)}\", 0, 0)         forward_message(incoming)</p> <p>time.sleep(0.1)</p> <p>## my_oled.py</p> <p>from machine import Pin, SoftI2C import ssd1306 import gfx</p> <p>i2c = SoftI2C(scl=Pin(4), sda=Pin(5))</p> <p>oled_width = 128 oled_height = 64 oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)</p> <p>graphics = gfx.GFX(oled_width, oled_height, oled.pixel)</p> <p>def print_text(msg, x=0, y=0):     oled.fill(0)     oled.text(msg, x, y)     oled.show()</p> <p>def clear():     oled.fill(0)     oled.show()</p> <p>def draw_line(x1, y1, x2, y2):     graphics.line(x1, y1, x2, y2)     oled.show()</p> <p>def draw_filled_rect(x, y, w, h):     graphics.fill_rect(x, y, w, h, 1)     oled.show()</p>"},{"location":"Resources/#final-cad-files","title":"Final CAD Files","text":"<ul> <li>Download HMI_3D_CAD_Files</li> </ul>"},{"location":"esp-32-table/","title":"ESP32 Table","text":"ESP Info Answer Help Model ESP32-S3-WROOM-1-N4 Include the entire part number (leave off any letters at the end that specify the package type) Product Page URL No Found on Espressif.com ESP32-S3-WROOM-1-N4 Datasheet URL link to product Do not paste links directly into the table. ESP32 S3 Datasheet URL Yes Has more detail on functions ESP32 S3 Technical Reference Manual URL Yes Has details on I/O multiplexing, USB, and others Vendor link link to product Digikey, Jameco, etc.  Do not paste links directly into the table. Code Examples Resources url(s) for libraries on github or other sites related to the microcontroller and your planned peripherals External Resources URL(s) No Search on Google and YouTube for other resources for each specific microcontroller. Unit cost $5.06 Find on Digikey, Jameco, MPJA, or octopart Absolute Maximum Current for entire IC 97mA Find in the microcontroller datasheet Supply Voltage Range 3V-3.6 Min / Nominal / Max / Absolute Max, as found in datasheet Absolute Maximum current  (for entire IC) 355mA as found in datasheet Maximum GPIO current  (per pin) 355mA as found in datasheet Supports External Interrupts? Yes as found in datasheet Required Programming Hardware, Cost, URL $0 as found in datasheet Module # Available Needed Associated Pins (or * for any) UART 3 2 * (GPIO1\u2013GPIO21, remappable) external SPI* 4 (SPI, HSPI, VSPI, FSPI) 1 * (GPIOs remappable, FSPI used for Flash) I2C 2 2 * (GPIOs remappable) GPIO 45 total (but ~30 usable) 10 GPIO0\u2013GPIO46 (varies per usage) ADC 20 channels 3 GPIO1\u2013GPIO20 (ADC1/2 groups) LED PWM 8 channels 2 * (via LEDC, any GPIO) Motor PWM 6 groups x 4 timers = 24 channels 0 * (via MCPWM, any GPIO) USB Programmer 1 (USB-OTG native) 1 GPIO19 (D+) and GPIO20 (D\u2212) <p>* The ESP32-S2 has multiple SPI interfaces, but some are for internal use</p>"},{"location":"second-page/","title":"Second Page","text":"<p>Things to discuss</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}